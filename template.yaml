AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: patterns-s3-docrepo

Parameters:
  DocumentsBucketName:
    Type: String
    Default: 'patterns-s3docrepo-documents'
  StagingBucketName:
    Type: String
    Default: 'patterns-s3docrepo-staging'
  QueuedBucketName:
    Type: String
    Default: 'patterns-s3docrepo-queued'

Globals:
  Function:
    Timeout: 15
    Environment:
      Variables:
        language: 'en'

Resources:
  ## S3 buckets
  DocumentsBucket:
    Type: AWS::S3::Bucket  
    Properties:
      BucketName: !Ref DocumentsBucketName
  StagingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref StagingBucketName
  QueuedBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref QueuedBucketName

  ## SQS queue
  MySqsQueue:
    Type: AWS::SQS::Queue

  ## opensearch domain

  OpenSearchServiceDomain:
    Type: AWS::OpenSearchService::Domain
    Properties:
      DomainName: 'department-doc'
      ClusterConfig:
        InstanceCount: '1'
        InstanceType: 't2.small.search'
      DomainEndpointOptions:
        EnforceHTTPS: true
      EBSOptions:
        EBSEnabled: true
        Iops: '0'
        VolumeSize: '20'
        VolumeType: 'gp2'

      AccessPolicies:
        Version: '2012-10-17'
        Statement:
          -
            Effect: 'Allow'
            Principal:
              AWS:
                - !GetAtt AddToESFunctionRole.Arn
                - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'es:*'
            Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/department-doc/*'



  # Lambda functions

  queryESFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: queryESindex/
      Handler: app.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 10
      ReservedConcurrentExecutions: 1
      Environment:
        Variables:
          domain: !GetAtt OpenSearchServiceDomain.DomainEndpoint
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /
            Method: GET

  AddToESFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: addToESindex/
      Handler: app.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 10
      ReservedConcurrentExecutions: 1
      Environment:
        Variables:
          domain: !GetAtt OpenSearchServiceDomain.DomainEndpoint       
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref QueuedBucketName        
        - Statement:
          - Effect: Allow
            Resource: '*'
            Action:
              - comprehend:*
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt MySqsQueue.Arn
            BatchSize: 1

  BatchingFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: batchingFunction/
      Handler: app.handler
      Runtime: nodejs12.x
      MemorySize: 512
      Environment:
        Variables:
          OutputBucket: !Ref QueuedBucketName
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref QueuedBucketName
        - S3ReadPolicy:
            BucketName: !Ref StagingBucketName
      Events:
        OriginalTextUpload:
          Type: S3
          Properties:
            Bucket: !Ref StagingBucket
            Events: s3:ObjectCreated:*
            Filter: 
              S3Key:
                Rules:
                  - Name: suffix
                    Value: '.txt'

  AddToQueueFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: addToQueueFunction/
      Handler: app.handler
      Runtime: nodejs12.x
      Timeout: 15
      MemorySize: 128
      Environment:
        Variables:
          SQSqueueName: !Ref MySqsQueue
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt MySqsQueue.QueueName
        - S3ReadPolicy:
            BucketName: !Ref QueuedBucketName
       
      Events:
        FileUpload:
          Type: S3
          Properties:
            Bucket: !Ref QueuedBucket
            Events: s3:ObjectCreated:*

  ProcessGraphFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: processGraph/
      Handler: app.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Environment:
        Variables:
          OutputBucket: !Ref QueuedBucketName
          MaxLabels: 5
          MinConfidence: 60
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref QueuedBucketName
        - S3ReadPolicy:
            BucketName: !Ref DocumentsBucketName
        - Statement:
          - Effect: Allow
            Resource: '*'
            Action:
              - textract:*
      Events:
        Upload:
          Type: S3
          Properties:
            Bucket: !Ref DocumentsBucket
            Events: s3:ObjectCreated:*
            Filter: 
              S3Key:
                Rules:
                  - Name: suffix
                    Value: '.png'

  ProcessAudioFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: processAudio/
      Handler: app.lambda_handler
      Runtime: python3.8
      MemorySize: 128
      Environment:
        Variables:
          OutputBucket: !Ref StagingBucketName
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref StagingBucketName
        - S3ReadPolicy:
            BucketName: !Ref DocumentsBucketName
        - Statement:
          - Effect: Allow
            Resource: '*'
            Action:
              - transcribe:*
      Events:
        Upload:
          Type: S3
          Properties:
            Bucket: !Ref DocumentsBucket
            Events: s3:ObjectCreated:*
            Filter: 
              S3Key:
                Rules:
                  - Name: suffix
                    Value: '.mp3'


  ProcessDOCXFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: processDOCX/
      Handler: app.handler
      Runtime: nodejs12.x
      MemorySize: 512
      Environment:
        Variables:
          OutputBucket: !Ref StagingBucketName
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref StagingBucketName
        - S3ReadPolicy:
            BucketName: !Ref DocumentsBucketName
      Events:
        Upload:
          Type: S3
          Properties:
            Bucket: !Ref DocumentsBucket
            Events: s3:ObjectCreated:*
            Filter: 
              S3Key:
                Rules:
                  - Name: suffix
                    Value: '.docx'

  ProcessPDFFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: processPDF/
      Handler: app.handler
      Runtime: nodejs12.x
      MemorySize: 512
      Environment:
        Variables:
          OutputBucket: !Ref StagingBucketName
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref StagingBucketName
        - S3ReadPolicy:
            BucketName: !Ref DocumentsBucketName
      Events:
        Upload:
          Type: S3
          Properties:
            Bucket: !Ref DocumentsBucket
            Events: s3:ObjectCreated:*
            Filter: 
              S3Key:
                Rules:
                  - Name: suffix
                    Value: '.pdf'
  
  KendraIndexRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: KendraIndexRoleforS3
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: kendra.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'cloudwatch:PutMetricData'
                Resource: '*'
                Condition:
                  StringEquals:
                    'cloudwatch:namespace': Kendra
              - Effect: Allow
                Action: 'logs:DescribeLogGroups'
                Resource: '*'
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: !Sub >-
                  arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kendra/*
              - Effect: Allow
                Action:
                  - 'logs:DescribeLogStreams'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub >-
                  arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kendra/*:log-stream:*
  KendraDataSourceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: KendraDataSourceRoleforS3
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: kendra.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:GetObject'
                Resource:
                  - !Join 
                    - ''
                    - - !GetAtt 
                        - QueuedBucket
                        - Arn
                      - /*
                Effect: Allow
              - Action:
                  - 's3:ListBucket'
                Resource:
                  - !GetAtt 
                    - QueuedBucket
                    - Arn
                Effect: Allow
              - Effect: Allow
                Action:
                  - 'kendra:BatchPutDocument'
                  - 'kendra:BatchDeleteDocument'
                Resource:
                  - !Sub 
                    - >-
                      arn:aws:kendra:${AWS::Region}:${AWS::AccountId}:index/{index}
                    - index: !Ref KendraIndex

  KendraIndex:
    Type: 'AWS::Kendra::Index'
    Properties:
      Edition: DEVELOPER_EDITION
      Name: GroupDocumentKendraIndex
      RoleArn: !GetAtt 
        - KendraIndexRole
        - Arn
  KendraDataSource:
    Type: 'AWS::Kendra::DataSource'
    Properties:
      DataSourceConfiguration:
        S3Configuration:
          BucketName: !Ref QueuedBucket
      IndexId: !Ref KendraIndex
      Name: GroupDocumentKendraDataSource
      RoleArn: !GetAtt 
        - KendraDataSourceRole
        - Arn
      Type: S3


  S3CustomResource:
    Type: Custom::S3CustomResource
    Properties:
      ServiceToken: !GetAtt AWSLambdaFunction.Arn
      the_bucket: !Ref DocumentsBucket
      dirs_to_create: 
        - reportCsv
        - audio
        - paper
        - graph
  AWSLambdaFunction:
     Type: "AWS::Lambda::Function"
     Properties:
       Description: "Work with S3 Buckets!"
       FunctionName: !Sub '${AWS::StackName}-${AWS::Region}-lambda'
       Handler: index.handler
       Role: !GetAtt AWSLambdaExecutionRole.Arn
       Timeout: 360
       Runtime: python3.6
       Code:
         ZipFile: |
          import boto3
          import cfnresponse
          def handler(event, context):
              # Init ...
              the_event = event['RequestType']
              print("The event is: ", str(the_event))
              response_data = {}
              s_3 = boto3.client('s3')
              # Retrieve parameters
              the_bucket = event['ResourceProperties']['the_bucket']
              dirs_to_create = event['ResourceProperties']['dirs_to_create']
              try:
                  if the_event in ('Create', 'Update'):
                      print("Requested folders: ", str(dirs_to_create))
                      for dir_name in dirs_to_create:
                          print("Creating: ", str(dir_name))
                          s_3.put_object(Bucket=the_bucket,
                                         Key=(dir_name
                                              + '/'))
                  elif the_event == 'Delete':
                      print("Deleting S3 content...")
                      b_operator = boto3.resource('s3')
                      b_operator.Bucket(str(the_bucket)).objects.all().delete()
                  # Everything OK... send the signal back
                  print("Operation successful!")
                  cfnresponse.send(event,
                                   context,
                                   cfnresponse.SUCCESS,
                                   response_data)
              except Exception as e:
                  print("Operation failed...")
                  print(str(e))
                  response_data['Data'] = str(e)
                  cfnresponse.send(event,
                                   context,
                                   cfnresponse.FAILED,
                                   response_data)
  AWSLambdaExecutionRole:
     Type: AWS::IAM::Role
     Properties:
       AssumeRolePolicyDocument:
         Statement:
         - Action:
           - sts:AssumeRole
           Effect: Allow
           Principal:
             Service:
             - lambda.amazonaws.com
         Version: '2012-10-17'
       Path: "/"
       Policies:
       - PolicyDocument:
           Statement:
           - Action:
             - logs:CreateLogGroup
             - logs:CreateLogStream
             - logs:PutLogEvents
             Effect: Allow
             Resource: arn:aws:logs:*:*:*
           Version: '2012-10-17'
         PolicyName: !Sub ${AWS::StackName}-${AWS::Region}-AWSLambda-CW
       - PolicyDocument:
           Statement:
           - Action:
             - s3:PutObject
             - s3:DeleteObject
             - s3:List*
             Effect: Allow
             Resource:
             - !Sub arn:aws:s3:::${DocumentsBucket}/*
             - !Sub arn:aws:s3:::${DocumentsBucket}
           Version: '2012-10-17'
         PolicyName: !Sub ${AWS::StackName}-${AWS::Region}-AWSLambda-S3
       RoleName: !Sub ${AWS::StackName}-${AWS::Region}-AWSLambdaExecutionRole



  GlueRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "glue.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "*"
                Resource: "*"
 
  MyDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: "dbcrawler"
        Description: "Save the csv Report"
 
  MyGlueClassifier:
    Type: AWS::Glue::Classifier
    Properties:
      CsvClassifier:
        AllowSingleColumn: true
        ContainsHeader: PRESENT
        Delimiter: ','
        Header:
          - id
          - name
          - value
        Name: csvclassify
        QuoteSymbol: '"'


 
  MyCrawler2:
    Type: AWS::Glue::Crawler
    Properties:
      Name: "csvReportCrawler"
      Role: !GetAtt GlueRole.Arn
      DatabaseName: !Ref MyDatabase
      Classifiers:
        - !Ref MyGlueClassifier
      Targets:
        S3Targets:
          - Path: !Join 
                    - ''
                    - - !Ref DocumentsBucket
                      - /reportCsv
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      Schedule:
        ScheduleExpression: "cron(0/10 * ? * MON-FRI *)"


## Outputs
Outputs: 
  DocumentsBucketName:
    Description: Documents Bucket Name
    Value: !Ref DocumentsBucket

  StagingBucketName:
    Description: Staging Bucket Name
    Value: !Ref StagingBucket

  QueuedBucketName:
    Description: Queued Bucket Name
    Value: !Ref QueuedBucket

  AddToESFunctionARN:
    Description: This AddToESFunction function ARN.
    Value: !GetAtt AddToESFunction.Arn

  AddToESFunctionRoleARN:
    Description: This ARN needs permission in the Elasticsearch configuration.
    Value: !GetAtt AddToESFunctionRole.Arn

  queryESFunctionARN:
    Description: This ARN needs permission in the Elasticsearch configuration.
    Value: !GetAtt queryESFunction.Arn

  OpenSearchEndpoint:
    Description: The Endpoint for OpenSearch
    Value:
      Fn::GetAtt:
      - OpenSearchServiceDomain
      - DomainEndpoint